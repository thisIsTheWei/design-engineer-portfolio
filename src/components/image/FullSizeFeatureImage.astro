---
import type{IntersectionOptions} from "../../scripts/types/intersections";
import {getFadeInDataAttribute} from "../../scripts/utils/intersection-observer/fadein-intersection-observer";
interface Props {
  class?: string;
  src: string;
  alt?: string;
  lazy?: boolean;
  assetFolder: string;
  transitionName?: string;
  fadeIn?: boolean | IntersectionOptions;
}
const { class: className, src, alt, lazy = true, assetFolder, transitionName, fadeIn = false } = Astro.props;
const fadeInDataAttribute = getFadeInDataAttribute(fadeIn);
---

<section class:list={[className, "full-size-feature-image"]}
         {...fadeInDataAttribute !== undefined ? { 'data-fade-in-intersect data-animation-fade-in="from-bottom"': fadeInDataAttribute } : {}}>
  <div class="full-size-feature-image__block" {...(fadeIn ? { 'data-animation-block-slide': 'slide-out-right' } : {})}>
    <img
        src={assetFolder + src} alt={alt}
        loading={lazy ? "lazy" : "eager"}
        decoding="async" {...transitionName ? { 'transition:name': transitionName } : {}}
        {...(fadeIn ? { 'data-animation-scale': 'in-down' } : {})}/>
  </div>
</section>

<style lang="scss">
  @use "../../styles/abstracts/index" as *;

  .full-size-feature-image {

    &__block {
      border-radius: var(--border-radius-2, $border-radius-2);
      overflow: clip;
      position: relative;
      aspect-ratio: 16 / 9;

      img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: center;
      }

      @include mq(m) {
        aspect-ratio: 16 / 9;
      }
    }
    [data-animation-block-slide] {
      --clr-reveal-block: white;
    }
  }
</style>