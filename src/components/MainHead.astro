---
import '../styles/global.scss';

interface Props {
    title?: string | undefined;
    description?: string | undefined;
}

const { 
    title = "Wei-Hsin Chen: Design Engineer Portfolio",
    description = "The portfolio of Wei-Hsin Chen, a design engineer."
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<meta name="description" content={description} />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="icon" type="image/svg+xml" href="/favicon.svg">
<link rel="icon" type="image/png" href="/favicon.png">
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=DM+Sans:ital,opsz,wght@400..700;1,400..700&family=Paytone+One&display=swap" rel="stylesheet">
<script is:inline>
  function getThemePreference() {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  }

  function setTheme(theme) {
    if (theme === 'dark') {
      document.documentElement.classList.add('isDark');
    } else {
      document.documentElement.classList.remove('isDark');
    }
    if (typeof localStorage !== 'undefined') {
      localStorage.setItem('theme', theme);
    }
  }

  function updateTheme() {
    setTheme(getThemePreference());
  }

  // Initial theme setup
  updateTheme();

  // Watch for changes in system color scheme
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', updateTheme);

  // Watch for changes in document element class if localStorage is available
  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          const isDark = document.documentElement.classList.contains('isDark');
          localStorage.setItem('theme', isDark ? 'dark' : 'light');
        }
      });
    });

    observer.observe(document.documentElement, { attributes: true });
  }
</script>


