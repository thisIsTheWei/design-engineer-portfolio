---
import type { IntersectionOptions } from '../scripts/types/intersections';
import {getFadeInDataAttribute} from "../scripts/utils/intersection-observer/fadein-intersection-observer";
interface Metric {
  value: string;
  desc: string;
}

interface Props {
  class?: string;
  description: string
  metrics: Array<Metric>;
  fadeIn?: boolean | IntersectionOptions;
}

const { class: className, description, metrics, fadeIn = false}: Props = Astro.props;
const fadeInDataAttribute = getFadeInDataAttribute(fadeIn);
---

<section  class:list={[className, "key-metrics grid border-radius-2"]}
          {...fadeInDataAttribute !== undefined ? { 'data-fade-in-intersect data-animation-fade-in="from-bottom"': fadeInDataAttribute } : {}}>
  <div class="key-metrics__description">
    <h2 class="h3">Key Metrics</h2>
    <p>{description}</p>
  </div>
  <div class="key-metrics__metrics">
    {metrics.map(metric => (
      <div class="key-metrics__item border-radius-2" data-animation-pop="top-right">
         <h3 class="display3">{metric.value}</h3>
         <p>{metric.desc}</p>
       </div>
    ))}
  </div>
</section>

<style lang="scss">
  @use "../styles/abstracts/index" as *;

  .key-metrics {
    --_clr-bg: var(--clr-bg, #{clr(neutral, white)});
    background-color: var(--_clr-bg);
    padding: $size-6 $size-8;
    
    @include mq(m) {
      padding: $size-11 $size-13;
      grid-template-columns: 1fr;
      gap: $size-11;
    }

    @include mq(l) {
      padding: $size-11 $size-13;
      grid-template-columns: 2fr 3fr;
      gap: $size-11;
    }
    

    &__description {
      display: flex;
      flex-direction: column;
      gap: $size-4;
      justify-content: center;
    }

    &__metrics {
      display: grid;
      gap: $size-4;
      
      @include mq(m) {
        grid-template-columns: 1fr 1fr;
        grid-template-rows: 1fr 1fr;
        gap: $size-4;
      }
    }

    &__item {
      --_clr-item-bg: var(--clr-item-bg, #{clr(neutral, white)});

      background-color: var(--clr-item-bg);
      display: flex;
      flex-direction: column;
      padding: $size-8;
      gap: $size-4;
      justify-content: space-between;

      &:nth-child(1) {
        --clr-item-bg: #{clr(primary, lightest)};
        --animation-delay: 0.3s;
      }

      &:nth-child(2) {
        --clr-item-bg: #{clr(secondary, lightest)};
        --animation-delay: 0.5s;
      }

      &:nth-child(3) {
        --clr-item-bg: #{clr(tertiary, lightest)};
        --animation-delay: 0.7s;
      }

      @include mq(m) {
        &:nth-child(1) {
          grid-column: 1 / 2;
          grid-row: 1 / 2;
        }
        &:nth-child(2) {
          grid-column: 1 / 2;
          grid-row: 2 / 3;

        }
        &:nth-child(3) {
          grid-column: 2 / 3;
          grid-row: 1 / 3;
        }
      }
    }
  }
  :root.theme-dark {
    .key-metrics {
      --clr-bg: #{clr(neutral, dark)};

      &__item{
        &:nth-child(1) {
          --clr-item-bg: #{clr(primary, darker)}
        }

        &:nth-child(2) {
          --clr-item-bg: #{clr(secondary, darker)}
        }

        &:nth-child(3) {
          --clr-item-bg: #{clr(tertiary, darker)}
        }
      }
    }
  }
</style>