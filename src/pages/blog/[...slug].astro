---
// @ts-nocheck
import { type CollectionEntry, getCollection } from "astro:content";
import { render } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import Contact from "../../components/Contact.astro";
import FormattedDate from "../../components/composable/FormattedDate.astro";

interface Props {
  entry: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const blogPosts = await getCollection("blog");
  return blogPosts.map((post) => ({
    params: { slug: post.id },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await render(post);
const { title, description, pubDate, updatedDate, heroImage, codepen } =
  post.data;
---

<BaseLayout title={`${title} | Wei-Hsin Chen`} description={description}>
  <article class="blog-post">
    <div class="title">
      <h1>{title}</h1>
      <div class="posted-by">
        <span class="body-small">Posted by <a href="/">Wei-Hsin Chen</a></span>
        <div class="date">
          <FormattedDate date={pubDate} />
          {
            updatedDate && (
              <div class="last-updated-on">
                Last updated on <FormattedDate date={updatedDate} />
              </div>
            )
          }
        </div>
      </div>
    </div>
    <Content />
  </article>
  <Contact fadeIn />
  {
    codepen && (
      <script src="https://cpwebassets.codepen.io/assets/embed/ei.js" async />
    )
  }
</BaseLayout>

<style is:global lang="scss">
  @use "../../styles/abstracts/" as *;

  .blog-post {
    margin-inline: auto;
    max-width: 65ch;
    > * + * {
      --_flow-space: var(--flow-space, 1rem);
      margin-block-start: var(--_flow-space);
    }

    ol,
    ul {
      padding-left: $size-8;
    }

    .title {
      margin-bottom: $size-4;
      padding: $size-10 0 $size-4;
      text-align: center;
      line-height: 1;
    }
    .title h1 {
      margin: 0 0 $size-2 0;
    }
    .posted-by {
      display: flex;
      gap: $size-2;
      font-size: var(--body-font-size-small);
      justify-content: center;
      margin-block-start: $size-4;
    }
  }

  h1 {
    --ff-size: clamp(1.2rem, 3vw + 0.6rem, 2.4rem);
  }

  h2 {
    --ff-size: clamp(1.08rem, 2.4vw + 0.54rem, 2.1rem);

    padding-block-start: 1.4rem;
  }

  h3 {
    --ff-size: clamp(0.96rem, 1.8vw + 0.48rem, 1.8rem);

    padding-block-start: 1.2rem;
  }

  h4 {
    --ff-size: clamp(0.84rem, 1.2vw + 0.42rem, 1.5rem);

    padding-block-start: 1rem;
  }

  pre {
    padding: 1.5rem;
  }

  blockquote {
    color: var(--clr-blockquote-text);
    padding: 1.2rem 1.2rem 1.2rem 3rem;
    border-left: 8px solid clr(secondary, darker);
    position: relative;
    background: var(--clr-blockquote-background);
    &::before {
      content: "ðŸš¨";
      position: absolute;
      left: 1rem;
    }
    &::after {
      content: "";
    }
    P {
      --clr-bg: var(--clr-blockquote-background);
      --clr: var(--clr-blockquote-text);
    }
  }
</style>
