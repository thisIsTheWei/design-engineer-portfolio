---
import MainHead from '../components/global/MainHead.astro';
import Header from '../components/global/Header.astro';
import Footer from '../components/global/Footer.astro';
import '../styles/global.scss';

interface Props {
    title?: string | undefined;
    description?: string | undefined;
}

const { title, description = "Wei-Hsin Chen, A Design Engineer Portfolio" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
    <head>
        <MainHead title={title} description={description} />
    </head>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-3W70CS5FFJ"></script>

    <body class="base-layout">
        <Header />
        <main id="main-content">
            <slot />
        </main>

        <Footer />
        <script>
            import { FadeinIntersectionObserver } from "../scripts/utils/intersection-observer/fadein-intersection-observer.ts";

            let fadeInObserver = null;

            function initializeFadeInObserver() {
                // Customize default options as needed
                fadeInObserver = new FadeinIntersectionObserver();
            }

            function cleanupFadeInObserver() {
                if (fadeInObserver) {
                    fadeInObserver.disconnect();
                    fadeInObserver = null;
                }
            }

            // Initialize on script load (which occurs after DOM is ready in this context)
            initializeFadeInObserver();

            // Handle client-side navigation
            document.addEventListener('astro:page-load', () => {
                cleanupFadeInObserver();
                initializeFadeInObserver();
            });

            // Cleanup before page unload
            document.addEventListener('astro:before-swap', cleanupFadeInObserver);

            // Cleanup when the script's parent element is removed from the DOM
            // This helps during development with HMR (Hot Module Replacement)
            if (import.meta.hot) {
                import.meta.hot.dispose(() => {
                    cleanupFadeInObserver();
                });
            }

        </script>
    </body>
</html>
